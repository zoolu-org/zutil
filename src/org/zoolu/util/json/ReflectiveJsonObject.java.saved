package org.zoolu.util.json;


import java.io.IOException;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.util.ArrayList;

import org.zoolu.util.ByteUtils;
import org.zoolu.util.config.ReflectiveObject;


/** Allows to inspect and modify attribute values of an object using attribute names and JSON values.
 */
public class ReflectiveJsonObject extends ReflectiveObject {
	
	
	/** Gets list of attributes. */
	public ArrayList<JsonMember> getMembers() {
		ArrayList<JsonMember> members=new ArrayList<>();
		for (Field field : fields) {
			// @@@@@ force field accessibility
			boolean is_accessible=field.isAccessible();
			if (fullAccess && !is_accessible) field.setAccessible(true);
			try {
				JsonMember member=getMember(field);
				if (member!=null) members.add(member);
			}
			catch (IllegalAccessException e) {
				e.printStackTrace();
			}
			// @@@@@ restore field accessibility
			if (fullAccess && !is_accessible) field.setAccessible(false);
		}
		return members;
	}
	
	
	private JsonMember getMember(Field field) throws IllegalAccessException {
		Object value=field.get(obj);
		if (value==null) return null;
		// else
		Class<?> type=field.getType();
		JsonValue jval=null;
		if (type==byte.class || type==short.class || type==int.class || type==long.class || type==float.class || type==double.class) jval=new JsonNumber((double)value);
		else
		if (type==boolean.class) jval=new JsonBoolean((Boolean)value);
		else
		if (type==java.lang.String.class) jval=new JsonString((String)value);
		else
		if (type.isArray()) jval=toJsonArray();
		else
		jval=toJsonObject(value);
		
		if (jval!=null) return new JsonMember(field.getName(),jval);
		else return null;
	}

	
	private static JsonArray toJsonArray() {
		// TODO
		return null;
	}

	
	private static JsonObject toJsonObject(Object o) {
		// TODO
		return null;
	}

	
	

	/** Creates a new object from JSON.
	 * @param json JSO N string
	 * @param c class type
	 * @return the new object */
	public static <T> T fromJson(String json, Class<T> c) {
		try {
			T obj=c.newInstance();
			new ReflectiveJsonObject(obj,true).set(json);
			//fromJson(json,obj,true);
			return obj;
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	
	
	private static void fromJson(String json, Object obj, boolean fullAccess) throws IOException {
		JsonParser par=new JsonParser(json);
		JsonObject jsonObj=par.parseObject();
		//ReflectiveObject ref=new ReflectiveObject(obj,fullAccess);
		Field[] fields=(fullAccess)? obj.getClass().getDeclaredFields() : obj.getClass().getFields();
		for (JsonMember m: jsonObj.getMembers()) {
			String attribute=m.getName();
			JsonValue value=m.getValue();
			if (value==JsonNull.NULL) return;
			// else
			for (Field field : fields) {
				String fieldName=field.getName();
				if (attribute.equals(fieldName)) {
					Class<?> fieldClass=field.getType();
					String fieldClassName=fieldClass.getName();
					// @@@@@ force field accessibility
					boolean is_accessible=field.isAccessible();
					if (fullAccess && !is_accessible) field.setAccessible(true);
					try {
						if (!fieldClass.isArray()) {
							if (fieldClassName.equals("byte")) field.set(obj,new Byte((byte)((JsonNumber)value).getValue()));
							else
							if (fieldClassName.equals("char")) field.set(obj,new Character(((JsonString)value).getValue().charAt(0)));
							else
							if (fieldClassName.equals("double")) field.set(obj,new Double(((JsonNumber)value).getValue()));
							else
							if (fieldClassName.equals("float")) field.set(obj,new Float(((JsonNumber)value).getValue()));
							else
							if (fieldClassName.equals("int")) field.set(obj,new Integer((int)((JsonNumber)value).getValue()));
							else
							if (fieldClassName.equals("long")) field.set(obj,new Long((long)((JsonNumber)value).getValue()));
							else
							if (fieldClassName.equals("short")) field.set(obj,new Short((short)((JsonNumber)value).getValue()));
							else
							if (fieldClassName.equals("boolean"))field.set(obj,new Boolean(((JsonBoolean)value).isTrue));
							else
							if (fieldClassName.equals("java.lang.String")) field.set(obj,((JsonString)value).getValue());
							else {
								Object o=Class.forName(fieldClassName).newInstance();
								new ReflectiveJsonObject(o,true).set((JsonObject)value);
								field.set(obj,o);
							}
						}
						else {
							// array
							fieldClassName=getArrayClassTypeString(fieldClassName);
							Object valueObj=field.get(obj);
							int len=(valueObj!=null)? java.lang.reflect.Array.getLength(valueObj) : 0;
							if (fieldClassName.equals("int")) {
								ArrayList<JsonValue> arrayValues=((JsonArray)value).getValues();
								int[] array=new int[arrayValues.size()];
								for (int i=0; i<array.length; i++) array[i]=(int)((JsonNumber)arrayValues.get(i)).getValue();
								field.set(obj,array);
							}
							else
							if (fieldClassName.equals("long")) {
								ArrayList<JsonValue> arrayValues=((JsonArray)value).getValues();
								long[] array=new long[arrayValues.size()];
								for (int i=0; i<array.length; i++) array[i]=(long)((JsonNumber)arrayValues.get(i)).getValue();
								field.set(obj,array);
							}
							else
							if (fieldClassName.equals("float")) {
								ArrayList<JsonValue> arrayValues=((JsonArray)value).getValues();
								float[] array=new float[arrayValues.size()];
								for (int i=0; i<array.length; i++) array[i]=(float)((JsonNumber)arrayValues.get(i)).getValue();
								field.set(obj,array);
							}
							else
							if (fieldClassName.equals("double")) {
								ArrayList<JsonValue> arrayValues=((JsonArray)value).getValues();
								double[] array=new double[arrayValues.size()];
								for (int i=0; i<array.length; i++) array[i]=(double)((JsonNumber)arrayValues.get(i)).getValue();
								field.set(obj,array);
							}
							else
							if (fieldClassName.equals("byte")) {
								field.set(obj,ByteUtils.fromHex(((JsonString)value).getValue()));
							}
							else
							if (fieldClassName.equals("java.lang.String")) {
								ArrayList<JsonValue> arrayValues=((JsonArray)value).getValues();
								ArrayList<String> array=new ArrayList<>();
								for (JsonValue val : arrayValues) array.add(((JsonString)val).getValue());
								field.set(obj,array.toArray(new String[0]));
							}
							else {
								ArrayList<JsonValue> arrayValues=((JsonArray)value).getValues();
								ArrayList<Object> array=new ArrayList<>();
								Class<?> c=Class.forName(fieldClassName);
								for (JsonValue val : arrayValues) {
									Object o=c.newInstance();
									new ReflectiveJsonObject(o,true).set((JsonObject)val);
									array.add(o);
								}
								Object cArray=Array.newInstance(c,array.size());
								for (int i=0; i<array.size(); i++) Array.set(cArray,i,array.get(i));
								field.set(obj,cArray);
							}
						}
					}
					catch (Exception e) {
						e.printStackTrace();
					}
					// @@@@@ restore field accessibility
					if (fullAccess && !is_accessible) field.setAccessible(false);
					break;
				} 
			}
		}
	}

	
	public ReflectiveJsonObject(Object obj, boolean fullAccess) {
		super(obj,true);
	}
	
	
	/** Sets the object from JSON. 
	 * @throws IOException */
	public void set(String json) throws IOException {
		JsonParser par=new JsonParser(json);
		set(par.parseObject());
	}

	
	/** Sets the object from JSON object. 
	 * @throws IOException */
	public void set(JsonObject o) throws IOException {
		for (JsonMember m: o.getMembers()) setAttribute(m.getName(),m.getValue());
	}


	/** Sets an attribute value from the JSON value. */
	public void setAttribute(String attribute, JsonValue value) {
		if (value==JsonNull.NULL) return;
		// else
		for (Field field : fields) {
			String fieldName=field.getName();
			if (attribute.equals(fieldName)) {
				Class<?> fieldClass=field.getType();
				String fieldClassName=fieldClass.getName();
				// @@@@@ force field accessibility
				boolean is_accessible=field.isAccessible();
				if (fullAccess && !is_accessible) field.setAccessible(true);
				try {
					if (!fieldClass.isArray()) {
						if (fieldClassName.equals("byte")) field.set(obj,new Byte((byte)((JsonNumber)value).getValue()));
						else
						if (fieldClassName.equals("char")) field.set(obj,new Character(((JsonString)value).getValue().charAt(0)));
						else
						if (fieldClassName.equals("double")) field.set(obj,new Double(((JsonNumber)value).getValue()));
						else
						if (fieldClassName.equals("float")) field.set(obj,new Float(((JsonNumber)value).getValue()));
						else
						if (fieldClassName.equals("int")) field.set(obj,new Integer((int)((JsonNumber)value).getValue()));
						else
						if (fieldClassName.equals("long")) field.set(obj,new Long((long)((JsonNumber)value).getValue()));
						else
						if (fieldClassName.equals("short")) field.set(obj,new Short((short)((JsonNumber)value).getValue()));
						else
						if (fieldClassName.equals("boolean"))field.set(obj,new Boolean(((JsonBoolean)value).isTrue));
						else
						if (fieldClassName.equals("java.lang.String")) field.set(obj,((JsonString)value).getValue());
						else {
							Object o=Class.forName(fieldClassName).newInstance();
							new ReflectiveJsonObject(o,true).set((JsonObject)value);
							field.set(obj,o);
						}
					}
					else {
						// array
						fieldClassName=getArrayClassTypeString(fieldClassName);
						Object valueObj=field.get(obj);
						int len=(valueObj!=null)? java.lang.reflect.Array.getLength(valueObj) : 0;
						if (fieldClassName.equals("int")) {
							ArrayList<JsonValue> arrayValues=((JsonArray)value).getValues();
							int[] array=new int[arrayValues.size()];
							for (int i=0; i<array.length; i++) array[i]=(int)((JsonNumber)arrayValues.get(i)).getValue();
							field.set(obj,array);
						}
						else
						if (fieldClassName.equals("long")) {
							ArrayList<JsonValue> arrayValues=((JsonArray)value).getValues();
							long[] array=new long[arrayValues.size()];
							for (int i=0; i<array.length; i++) array[i]=(long)((JsonNumber)arrayValues.get(i)).getValue();
							field.set(obj,array);
						}
						else
						if (fieldClassName.equals("float")) {
							ArrayList<JsonValue> arrayValues=((JsonArray)value).getValues();
							float[] array=new float[arrayValues.size()];
							for (int i=0; i<array.length; i++) array[i]=(float)((JsonNumber)arrayValues.get(i)).getValue();
							field.set(obj,array);
						}
						else
						if (fieldClassName.equals("double")) {
							ArrayList<JsonValue> arrayValues=((JsonArray)value).getValues();
							double[] array=new double[arrayValues.size()];
							for (int i=0; i<array.length; i++) array[i]=(double)((JsonNumber)arrayValues.get(i)).getValue();
							field.set(obj,array);
						}
						else
						if (fieldClassName.equals("byte")) {
							field.set(obj,ByteUtils.fromHex(((JsonString)value).getValue()));
						}
						else
						if (fieldClassName.equals("java.lang.String")) {
							ArrayList<JsonValue> arrayValues=((JsonArray)value).getValues();
							ArrayList<String> array=new ArrayList<>();
							for (JsonValue val : arrayValues) array.add(((JsonString)val).getValue());
							field.set(obj,array.toArray(new String[0]));
						}
						else {
							ArrayList<JsonValue> arrayValues=((JsonArray)value).getValues();
							ArrayList<Object> array=new ArrayList<>();
							Class<?> c=Class.forName(fieldClassName);
							for (JsonValue val : arrayValues) {
								Object o=c.newInstance();
								new ReflectiveJsonObject(o,true).set((JsonObject)val);
								array.add(o);
							}
							Object cArray=Array.newInstance(c,array.size());
							for (int i=0; i<array.size(); i++) Array.set(cArray,i,array.get(i));
							field.set(obj,cArray);
						}
					}
				}
				catch (Exception e) {
					e.printStackTrace();
				}
				// @@@@@ restore field accessibility
				if (fullAccess && !is_accessible) field.setAccessible(false);
				break;
			} 
		}
	}

}
